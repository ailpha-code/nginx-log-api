<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.LogRecordMapper">

    <insert id="addLog" parameterType="com.entity.LogRecord">
        INSERT INTO LogRecord (remoteAddr,recordTime,requestType,requestUrl,protocol,status,costTime,hostUrl,clientType,param)
        VALUES (#{remoteAddr},#{recordTime},#{requestType},#{requestUrl},#{protocol},#{status},
        #{costTime},#{hostUrl},#{clientType},#{param});
    </insert>

    <delete id="deleteLogById">
        DELETE FROM LogRecord WHERE id=#{id}
    </delete>

    <update id="updateLog" parameterType="com.entity.LogRecord">
        UPDATE LogRecord
        <trim prefix="set" suffixOverrides=",">
             <if test="(null != remoteAddr)" >
                 remoteAddr=#{remoteAddr},
            </if>
            <if test="(null != recordTime)" >
                recordTime=#{recordTime},
            </if>
            <if test="(null != requestType)" >
                requestType=#{requestType},
            </if>
            <if test="(null != requestUrl)" >
                requestUrl=#{requestUrl},
            </if>
            <if test="(null != protocol)" >
                protocol=#{protocol},
            </if>
            <if test="(null != status)" >
                status=#{status},
            </if>
            <if test="(null != costTime)" >
                costTime=#{costTime},
            </if>
            <if test="(null != hostUrl)" >
                hostUrl=#{hostUrl},
            </if>
            <if test="(clientType != clientType)" >
                clientType=#{clientType},
            </if>
        </trim>
        WHERE id=#{id}
    </update>

    <select id="list" resultType="com.entity.LogRecord">
        SELECT * FROM LogRecord LIMIT #{start}, #{paseSize};
    </select>

    <select id="getById" parameterType="Long" resultType="com.entity.LogRecord">
        SELECT * FROM LogRecord WHERE id=#{id};
    </select>

    <select id="getTotal" resultType="Integer">
        SELECT COUNT(id) from LogRecord;
    </select>

    <select id="listByTime" resultType="com.entity.LogRecord">
        SELECT * FROM LogRecord
        <if test="(null != startTime) and (null != endTime)" >
            WHERE recordTime  &gt;=#{startTime}  AND recordTime  &lt;=#{endTime}
        </if>
    </select>

    <select id="countListByRemoteAddr" resultType="com.model.ClientAnalysisVO">
        SELECT count(id) AS visitCount,  remoteAddr AS clientIP FROM LogRecord
        <where>
            <if test="(null != requestUrl)" >
                AND requestUrl=#{requestUrl}
            </if>
            <if test="status!=-1">
               AND status=#{status}
            </if>
        </where>
        GROUP BY(remoteAddr) ORDER BY visitCount DESC  LIMIT #{start}, #{paseSize};
    </select>

    <select id="countListByUrl" resultType="com.model.APIAnalysisVO">
        SELECT count(id) AS apiCount,  requestUrl AS api FROM LogRecord
        <where>
            <if test="(null != remoteAddr)" >
                AND remoteAddr=#{remoteAddr}
            </if>
            <if test="status!=-1">
                AND status=#{status}
            </if>
        </where>
        GROUP BY(requestUrl) ORDER BY apiCount DESC  LIMIT #{start}, #{paseSize};
    </select>

    <select id="countListByStatus" resultType="com.model.ErrorAnalysisVO">
        SELECT count(id) AS errCount,  status  FROM LogRecord WHERE status &gt;=400
        GROUP BY(status) ORDER BY errCount DESC  LIMIT #{start}, #{paseSize};
    </select>
</mapper>